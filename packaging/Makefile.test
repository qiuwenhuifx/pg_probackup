ifeq ($(PBK_EDITION),std)
	SCRIPT_SUFFIX = _forks
else ifeq ($(PBK_EDITION),ent)
	SCRIPT_SUFFIX = _forks
else
	SCRIPT_SUFFIX =
endif

test: build/test_all
	@echo Test for all platform: done

build/test_all: build/test_debian build/test_ubuntu build/test_centos build/test_oraclelinux build/test_alt build/test_suse #build/test_rhel
	@echo Package testing is done

### DEBIAN
build/test_debian: build/test_debian_9 build/test_debian_10 build/test_debian_11
	@echo Debian: done

build/test_debian_9: build/test_debian_9_9.6 build/test_debian_9_10 build/test_debian_9_11 build/test_debian_9_12 build/test_debian_9_13 build/test_debian_9_14
	@echo Debian 9: done

build/test_debian_10: build/test_debian_10_9.6 build/test_debian_10_10 build/test_debian_10_11 build/test_debian_10_12 build/test_debian_10_13 build/test_debian_10_14
	@echo Debian 10: done

build/test_debian_11: build/test_debian_11_9.6 build/test_debian_11_10 build/test_debian_11_11 build/test_debian_11_12 build/test_debian_11_13 build/test_debian_11_14
	@echo Debian 11: done

### UBUNTU
build/test_ubuntu: build/test_ubuntu_18.04 build/test_ubuntu_20.04
	@echo Ubuntu: done

build/test_ubuntu_18.04: build/test_ubuntu_18.04_9.6 build/test_ubuntu_18.04_10 build/test_ubuntu_18.04_11 build/test_ubuntu_18.04_12 build/test_ubuntu_18.04_13 build/test_ubuntu_18.04_14
	@echo Ubuntu 18.04: done

build/test_ubuntu_20.04: build/test_ubuntu_20.04_9.6 build/test_ubuntu_20.04_10 build/test_ubuntu_20.04_11 build/test_ubuntu_20.04_12 build/test_ubuntu_20.04_13 build/test_ubuntu_20.04_14
	@echo Ubuntu 20.04: done

define test_deb
	docker rm -f $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION) >> /dev/null 2>&1 ; \
	docker run \
		-v $(WORKDIR)/packaging/test:/app/in \
		-v $(BUILDDIR)/data/www:/app/www \
		-e "DISTRIB=$1" -e "DISTRIB_VERSION=$2" -e "CODENAME=$3" -e "PG_VERSION=$4" -e "PG_FULL_VERSION=$5" \
		-e "PKG_HASH=$(PBK_HASH)" -e "PKG_URL=$(PBK_GIT_REPO)" -e "PKG_RELEASE=$(PBK_RELEASE)" -e "PKG_NAME=pg-probackup-$(PKG_NAME_SUFFIX)$4" \
		-e "PKG_VERSION=$(PBK_VERSION)" -e "PBK_EDITION=$(PBK_EDITION)" -e "PBK_EDITION_FULL=$(PBK_EDITION_FULL)" \
		--name $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION)_pg_$5 \
		--rm pgpro/$1:$2 /app/in/scripts/deb$(SCRIPT_SUFFIX).sh
endef

include packaging/test/Makefile.debian
include packaging/test/Makefile.ubuntu

# CENTOS
build/test_centos: build/test_centos_7 build/test_centos_8
	@echo Centos: done

build/test_centos_7: build/test_centos_7_9.6 build/test_centos_7_10 build/test_centos_7_11 build/test_centos_7_12 build/test_centos_7_13 #build/test_centos_7_14
	@echo Centos 7: done

# pgpro-9.6@centos-8 doesn't exist
build/test_centos_8: build/test_centos_8_10 build/test_centos_8_11 build/test_centos_8_12 build/test_centos_8_13 #build/test_centos_8_14 build/test_centos_8_9.6
	@echo Centos 8: done

# Oracle Linux
build/test_oraclelinux: build/test_oraclelinux_7 build/test_oraclelinux_8
	@echo Oraclelinux: done

build/test_oraclelinux_7: build/test_oraclelinux_7_9.6 build/test_oraclelinux_7_10 build/test_oraclelinux_7_11 build/test_oraclelinux_7_12 build/test_oraclelinux_7_13 #build/test_oraclelinux_7_14
	@echo Oraclelinux 7: done

# pgpro-9.6@oraclelinux-8 doesn't exist
build/test_oraclelinux_8: build/test_oraclelinux_8_10 build/test_oraclelinux_8_11 build/test_oraclelinux_8_12 build/test_oraclelinux_8_13 #build/test_oraclelinux_8_14 build/test_oraclelinux_8_9.6
	@echo Oraclelinux 8: done

# RHEL
build/test_rhel: build/test_rhel_7 #build/test_rhel_8
	@echo Rhel: done

build/test_rhel_7: build/test_rhel_7_9.6 build/test_rhel_7_10 build/test_rhel_7_11 build/test_rhel_7_12 build/test_rhel_7_13 #build/test_rhel_7_14
	@echo Rhel 7: done

build/test_rhel_8: build/test_rhel_8_9.6 build/test_rhel_8_10 build/test_rhel_8_11 build/test_rhel_8_12 build/test_rhel_8_13 build/test_rhel_8_14
	@echo Rhel 8: done

define test_rpm
	docker rm -f $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION) >> /dev/null 2>&1 ; \
	docker run \
		-v $(WORKDIR)/packaging/test:/app/in \
		-v $(BUILDDIR)/data/www:/app/www \
		-e "DISTRIB=$1" -e "DISTRIB_VERSION=$2" -e "CODENAME=$3" -e "PG_VERSION=$4" -e "PG_FULL_VERSION=$5" \
		-e "PKG_HASH=$(PBK_HASH)" -e "PKG_URL=$(PBK_GIT_REPO)" -e "PKG_RELEASE=$(PBK_RELEASE)" -e "PKG_NAME=pg_probackup-$(PKG_NAME_SUFFIX)$4" \
		-e "PKG_VERSION=$(PBK_VERSION)" -e "PBK_EDITION=$(PBK_EDITION)" -e "PBK_EDITION_FULL=$(PBK_EDITION_FULL)" \
		--name $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION)_pg_$5 \
		--rm pgpro/$1:$2 /app/in/scripts/rpm$(SCRIPT_SUFFIX).sh
endef

include packaging/test/Makefile.centos
include packaging/test/Makefile.rhel
include packaging/test/Makefile.oraclelinux

# Alt Linux
build/test_alt: build/test_alt_8 build/test_alt_9
	@echo Alt Linux: done

# nginx@alt7 fall with 'nginx: [alert] sysctl(KERN_RTSIGMAX) failed (1: Operation not permitted)'
# within docker on modern host linux kernels (this nginx build require Linux between 2.2.19 and 2.6.17)

build/test_alt_8: build/test_alt_8_9.6 build/test_alt_8_10 build/test_alt_8_11 build/test_alt_8_12 build/test_alt_8_13 build/test_alt_8_14
	@echo Alt Linux 8: done

build/test_alt_9: build/test_alt_9_9.6 build/test_alt_9_10 build/test_alt_9_11 build/test_alt_9_12 build/test_alt_9_13 build/test_alt_9_14
	@echo Alt Linux 9: done

define test_alt
	docker rm -f $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION) >> /dev/null 2>&1 ; \
	docker run \
		-v $(WORKDIR)/packaging/test:/app/in \
		-v $(BUILDDIR)/data/www:/app/www \
		-e "DISTRIB=$1" -e "DISTRIB_VERSION=$2" -e "CODENAME=$3" -e "PG_VERSION=$4" -e "PG_FULL_VERSION=$5" \
		-e "PKG_HASH=$(PBK_HASH)" -e "PKG_URL=$(PBK_GIT_REPO)" -e "PKG_RELEASE=$(PBK_RELEASE)" -e "PKG_NAME=pg_probackup-$(PKG_NAME_SUFFIX)$4" \
		-e "PKG_VERSION=$(PBK_VERSION)" -e "PBK_EDITION=$(PBK_EDITION)" -e "PBK_EDITION_FULL=$(PBK_EDITION_FULL)" \
		--name $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION)_pg_$5 \
		--rm pgpro/$1:$2 /app/in/scripts/alt$(SCRIPT_SUFFIX).sh
endef

include packaging/test/Makefile.alt

# SUSE Linux
build/test_suse: build/test_suse_15.1 build/test_suse_15.2
	@echo Suse: done

build/test_suse_15.1: build/test_suse_15.1_9.6 build/test_suse_15.1_10 build/test_suse_15.1_11 build/test_suse_15.1_12 build/test_suse_15.1_13
	@echo Suse 15.1: done

build/test_suse_15.2: build/test_suse_15.2_9.6 build/test_suse_15.2_10 build/test_suse_15.2_11 build/test_suse_15.2_12 build/test_suse_15.2_13 build/test_suse_15.2_14
	@echo Suse 15.2: done

define test_suse
	docker rm -f $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION) >> /dev/null 2>&1 ; \
	docker run \
		-v $(WORKDIR)/packaging/test:/app/in \
		-v $(BUILDDIR)/data/www:/app/www \
		-e "DISTRIB=$1" -e "DISTRIB_VERSION=$2" -e "CODENAME=$3" -e "PG_VERSION=$4" -e "PG_FULL_VERSION=$5" \
		-e "PKG_HASH=$(PBK_HASH)" -e "PKG_URL=$(PBK_GIT_REPO)" -e "PKG_RELEASE=$(PBK_RELEASE)" -e "PKG_NAME=pg_probackup-$(PKG_NAME_SUFFIX)$4" \
		-e "PKG_VERSION=$(PBK_VERSION)" -e "PBK_EDITION=$(PBK_EDITION)" -e "PBK_EDITION_FULL=$(PBK_EDITION_FULL)" \
		--name $1_$2_probackup_$(PKG_NAME_SUFFIX)$(PBK_VERSION)_pg_$5 \
		--rm pgpro/$1:$2 /app/in/scripts/suse$(SCRIPT_SUFFIX).sh
endef

include packaging/test/Makefile.suse
